# -*- coding: utf-8 -*-
"""Salinan dari DATASETPENDUDUK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1luXZV4h83mjVfmcTw6DQ8JE7aUtVArK4

#**Prediksi Angka Kelahiran di Jawa Barat**

## Import Library ...
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split


from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

"""### Menampilkan Dataset"""

df = pd.read_csv('datapenduduk.csv')
df

columns_to_use = ['nama_kabupaten_kota', 'status_kelahiran', 'jumlah_kelahiran', 'tahun']
filtered_df = df[columns_to_use]

filtered_df

"""## Proses Assesing Data"""

df.isna().sum()

df.dtypes

df.isnull().sum()

print(df.info())

"""## Pengelompokan data Jumlah kelahiran pertahun"""

df['jumlah_kelahiran'] = pd.to_numeric(df['jumlah_kelahiran'], errors='coerce')

data = df[df['status_kelahiran'] == 'HIDUP']

data_per_year = df.groupby(['tahun']).sum()['jumlah_kelahiran'].reset_index()
print(data_per_year)

"""## Visualisasi Data"""

# Visualisasi tren kelahiran per tahun
plt.figure(figsize=(10, 6))
sns.lineplot(data=data_per_year, x='tahun', y='jumlah_kelahiran', markers='o')
plt.title('Tren Kelahiran per Tahun')
plt.xlabel('Tahun')
plt.ylabel('Jumlah Kelahiran')
plt.xticks(ticks=data_per_year['tahun'], rotation=45)
plt.show()

"""## Menghitung Outlier"""

# Misalkan df adalah DataFrame Anda dan 'jumlah_kelahiran' adalah kolom yang ingin diperiksa
Q1 = df['jumlah_kelahiran'].quantile(0.25)
Q3 = df['jumlah_kelahiran'].quantile(0.75)
IQR = Q3 - Q1

batas_bawah = Q1 - 1.5 * IQR
batas_atas = Q3 + 1.5 * IQR

# Identifikasi outlier
outliers = df[(df['jumlah_kelahiran'] < batas_bawah) | (df['jumlah_kelahiran'] > batas_atas)]

print("Outliers:")
print(outliers)

"""## Prediksi jumlah kelahiran

### 1.   Proses training dataset


*   Menggunakan data dari tahun 2012 - 2022 sebagai data training
*   Menggunakan data 2023 sebagai data test
"""

# Agregasi data per kabupaten dan tahun
df_grouped = df.groupby(["tahun", "nama_kabupaten_kota"])["jumlah_kelahiran"].sum().reset_index()

# Pisahkan data untuk pelatihan dan pengujian
df_train = df_grouped[df_grouped['tahun'] < 2023]  # Data pelatihan dari 2012-2022
df_test = df_grouped[df_grouped['tahun'] == 2023]  # Data pengujian untuk 2023

# Buat model prediksi untuk setiap kabupaten
prediksi_total = {}
actual_total = {}

# Loop melalui setiap kabupaten untuk pelatihan dan pengujian
for kabupaten in df_train['nama_kabupaten_kota'].unique():
    df_kabupaten_train = df_train[df_train['nama_kabupaten_kota'] == kabupaten]

    # Siapkan data untuk model
    X_train = df_kabupaten_train['tahun'].values.reshape(-1, 1)  # Tahun
    y_train = df_kabupaten_train['jumlah_kelahiran'].values  # Jumlah kelahiran

    # Melatih model regresi linier
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Prediksi untuk tahun 2023
    X_test = np.array([[2023]])
    prediksi_2023 = model.predict(X_test)
    prediksi_total[kabupaten] = prediksi_2023[0]

    # Simpan nilai aktual untuk evaluasi
    actual_total[kabupaten] = df_test[df_test['nama_kabupaten_kota'] == kabupaten]['jumlah_kelahiran'].values[0]

# Hitung total prediksi dan total aktual untuk seluruh Jawa Barat
total_prediksi = sum(prediksi_total.values())
total_aktual = sum(actual_total.values())

print("Prediksi jumlah kelahiran di tahun 2023 per kabupaten:")
for kabupaten, prediksi in prediksi_total.items():
    print(f"{kabupaten}: {prediksi}")

print(f"\nTotal prediksi kelahiran di Jawa Barat pada tahun 2023: {total_prediksi}")
print(f"Total aktual kelahiran di Jawa Barat pada tahun 2023: {total_aktual}")

# Evaluasi hasil prediksi
mae = mean_absolute_error(list(actual_total.values()), list(prediksi_total.values()))
mse = mean_squared_error(list(actual_total.values()), list(prediksi_total.values()))
rmse = np.sqrt(mse)
r2 = r2_score(list(actual_total.values()), list(prediksi_total.values()))

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (RÂ²): {r2}")

"""### Akurasi Training Data mendekati 1 yaitu **0.9758144401761352** yang artinya sangat akurat

### 2.   Prediksi Jumlah kelahiran ditahun 2024
"""

# Buat model prediksi untuk setiap kabupaten
prediksi_total = {}

# Loop melalui setiap kabupaten untuk prediksi
for kabupaten in df_grouped['nama_kabupaten_kota'].unique():
    df_kabupaten = df_grouped[df_grouped['nama_kabupaten_kota'] == kabupaten]

    # Siapkan data untuk model
    X = df_kabupaten['tahun'].values.reshape(-1, 1)  # Tahun
    y = df_kabupaten['jumlah_kelahiran'].values  # Jumlah kelahiran

    # Melatih model regresi linier
    model = LinearRegression()
    model.fit(X, y)

    # Prediksi untuk tahun 2024
    prediksi_2024 = model.predict(np.array([[2024]]))
    prediksi_total[kabupaten] = prediksi_2024[0]

# Hitung total prediksi untuk seluruh Jawa Barat
total_prediksi = sum(prediksi_total.values())

print("Prediksi jumlah kelahiran di tahun 2024 per kabupaten:")
for kabupaten, prediksi in prediksi_total.items():
    print(f"{kabupaten}: {prediksi}")

print(f"\nTotal prediksi kelahiran di Jawa Barat pada tahun 2024: {total_prediksi}")